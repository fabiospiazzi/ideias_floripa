# app.py

import streamlit as st
import pandas as pd
import re
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import st_folium
from transformers import AutoTokenizer, AutoModelForSequenceClassification, pipeline
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
import time

#############################################################CONFIGURA√á√ÉO INICIAL##############################################################################
# Serve para manter o estado do c√≥digo e n√£o ficar atualizando toda hora que h√° uma intera√ß√£o com o resto do app.
if 'dados_processados' not in st.session_state:
    st.session_state.dados_processados = None
#############################################################CARREGA O ARQUIVO CSV#####################################################################################
# Fun√ß√£o para carregar CSV por upload
@st.cache_data #armazena dados no cache pra n√£o ficar carregando toda hora, a n√£o ser se um novo arquivo for carregado
def carregar_dados(uploaded_file=None):
    if uploaded_file is not None:
        return pd.read_csv(uploaded_file) #A primeira vez, verifica se o upload foi feito, se sim, joga pro pandas (pd)
    else:
        st.info("Nenhum arquivo CSV carregado ainda.")
        #Aqui √© um teste - carrega o banco de dados direto to github para testes - N√ÉO USADO
        #url = "https://raw.githubusercontent.com/fabiospiazzi/ideias_floripa/main/dados_ideias_floripa.csv"
        #return pd.read_csv(url)
#############################################################LISTA DE COMPARA√á√ÉO DE BAIRROS##############################################################################
# Lista fixa de bairros
bairros_floripa = [
    "Vargem Pequena", "Vargem Grande", "Vargem do Bom Jesus", "Vargem de Fora", "Trindade",
    "Tapera da Base", "Tapera", "Santo Ant√¥nio", "Santinho", "Santa M√¥nica", "Sambaqui",
    "Saco Grande", "Saco dos Lim√µes", "Rio Vermelho", "Rio Tavares do Norte",
    "Rio Tavares Central", "Rio Tavares", "Rio das Pacas", "Ribeir√£o da Ilha", "Retiro", "Ressacada",
    "Recanto dos A√ßores", "Ratones", "Praia Mole", "Praia Brava", "Porto da Lagoa",
    "Ponta das Canas", "Pedrita", "P√¢ntano do Sul", "Pantanal", "Morro do Peralta",
    "Morro das Pedras", "Monte Verde", "Monte Cristo", "Moenda", "Lagoinha do Norte",
    "Lagoa Pequena", "Lagoa", "Jurere Oeste", "Jurere Leste", "Jurer√™", "Jos√© Mendes",
    "Jo√£o Paulo", "Jardim Atl√¢ntico", "Itagua√ßu", "Itacorubi", "Ingleses Sul",
    "Ingleses Norte", "Ingleses Centro", "Ingleses", "Forte", "Estreito", "Dunas da Lagoa",
    "Daniela", "Costeiro do Ribeir√£o", "Costeira do Pirajuba√©", "C√≥rrego Grande",
    "Coqueiros", "Coloninha", "Centro", "Carianos", "Capoeiras", "Capivari",
    "Canto dos Ara√ß√°s", "Canto do Lamim", "Canto da Lagoa", "Canto", "Canasvieiras", "Campeche",
    "Campeche Sul", "Campeche Norte", "Campeche Leste", "Campeche Central",
    "Caieira", "Caiacanga", "Cacup√©", "Cachoeira do Bom Jesus Leste",
    "Cachoeira do Bom Jesus", "Bom Abrigo", "Base A√©rea", "Barra do Sambaqui",
    "Barra da Lagoa", "Balne√°rio", "Aut√≥dromo", "Arma√ß√£o", "Alto Ribeir√£o Leste",
    "Alto Ribeir√£o", "Agron√¥mica", "A√ßores", "Abra√£o"
]

#############################################################EXTRAIR OA BAIRROS DO TEXTO##############################################################################
def extrair_bairro(texto):
    texto_lower = texto.lower() #passa o texto para minusculo
    for bairro in bairros_floripa:
        if re.search(rf"\b{re.escape(bairro.lower())}\b", texto_lower): #lopping para buscar os bairros, usa \b para buscar palasvras inteiras e re.escape trata os caracteres especiais
            return bairro
    return None
#############################################################GEOLOCALIZA OS BAIRROS###################################################################################
# Geolocalizador
geolocator = Nominatim(user_agent="floripa-sentimento-streamlit") #nome de usu√°rio para usar a API, pode ser qualquer um que identifique o projeto

@st.cache_data # s√≥ geocodifica para aquele bairro uma vez
def geocodificar_bairro(bairro):
    try:
        local = geolocator.geocode(f"{bairro}, Florian√≥polis, SC, Brasil", timeout=10) #procura no openstreet map o nome do bairro mais Florian√≥pois mais Brasil a cada 10 s
        if local:
            return (local.latitude, local.longitude) #Se acha, retorna latitude e longitude
    except GeocoderTimedOut: #tenta conectar a cada 2 segundos, geralmente conecta.
        time.sleep(2)
        return geocodificar_bairro(bairro)
    return (None, None) #Se n√£o acha o bairro, retorna None, None nas coordenadas.
#############################################################CARREGA O MODELO BERT####################################################################################
# Carrega modelo e tokenizer
@st.cache_resource #mant√©m o modelo carregado na mem√≥ria
def carregar_modelo():
    model_name = "nlptown/bert-base-multilingual-uncased-sentiment" #Modelo usado
    tokenizer = AutoTokenizer.from_pretrained(model_name) #pr√©-processamento do modelo
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    return pipeline("sentiment-analysis", model=model, tokenizer=tokenizer), tokenizer

#############################################################FAZ A AN√ÅLISE DE SENTIMENTO################################################################################
# Fun√ß√£o para analisar sentimento
def analisar_sentimento_completo(texto, sentiment_analyzer, tokenizer):
    try:
        resultado = sentiment_analyzer(texto[:512])[0] #Analisa somente 512 token. √â uma limita√ß√£o dos modelos BERT
        label = resultado.get('label', '')
        score = resultado.get('score', 0.0)
        
        match = re.match(r"(\d)\s*stars?", label, re.IGNORECASE) #retorna o n√∫mero de estrelas atribuito na an√°lise de sentimento
        if match:
            estrelas = int(match.group(1)) # joga pra dentro de estrela o valor da qtd de estrelas
            sentimento = (
                "Negativo" if estrelas <= 2 else
                "Neutro" if estrelas == 3 else
                "Positivo"
            )
            tokens = tokenizer(texto, truncation=True, max_length=512, return_tensors="pt")
            num_tokens = tokens['input_ids'].shape[1] #quantidade de tokens utlizado na frase
            return sentimento, float(score), num_tokens
        else:
            return ("Indefinido", 0.0, 0)
    except Exception as e:
        return ("Erro", 0.0, 0)
#############################################################APP PRINCIPAL################################################################################
# App principal
def main():
    st.set_page_config(page_title="Ideias para Florian√≥polis", layout="wide") #Texto que vai na haba do navegador
    st.title("üí¨ Mapa de Ideias e Sentimentos sobre Florian√≥polis") #T√≠tulo da p√°gina

    # Inicializa√ß√£o do session state pra n√£o ficar autualizando autom√°tico toda hora que mexe no mapa
    if 'dados_processados' not in st.session_state:
        st.session_state.dados_processados = None
    if 'novas_ideias' not in st.session_state:
        st.session_state.novas_ideias = pd.DataFrame(columns=['IDEIA', 'sentimento', 'confianca', 'num_tokens', 'bairro', 'latitude', 'longitude'])
    if 'arquivo_carregado' not in st.session_state:
        st.session_state.arquivo_carregado = False
    if 'texto_ideia' not in st.session_state:
        st.session_state.texto_ideia = ""

    uploaded_file = st.file_uploader("üìÅ Fa√ßa upload de um CSV com a coluna 'IDEIA'", type=["csv"]) #Widget pra fazer o carregamento de um aquivo

    # Bot√£o de processamento (s√≥ aparece se fizer o upload de um aquivo e arquivo ainda n√£o foi processado)##################################################
    if uploaded_file is not None: #and not st.session_state.arquivo_carregado:
        if st.button("‚öôÔ∏èProcessar Arquivo", type="primary"):
            # Inicia o container de progresso
            progress_bar = st.progress(0)
            status_text = st.empty()  # Para mensagens din√¢micas
    
            with st.spinner('Processando arquivo CSV...'):
                # Reseta o estado se j√° existirem dados processados
                st.session_state.dados_processados = None
                st.session_state.arquivo_carregado = False
                
                df_temp = carregar_dados(uploaded_file)
                
                if 'IDEIA' in df_temp.columns:
                    # Passo 1/4: Carregar modelo (10%)
                    status_text.text("Carregando modelo...")
                    progress_bar.progress(10)
                    sentiment_analyzer, tokenizer = carregar_modelo()
                    
                    # Passo 2/4: An√°lise de sentimentos (40%)
                    status_text.text("Analisando sentimentos...")
                    resultados = []
                    for i, texto in enumerate(df_temp['IDEIA'].astype(str)):
                        resultados.append(analisar_sentimento_completo(texto, sentiment_analyzer, tokenizer))
                        progress_bar.progress(10 + int(30 * (i + 1) / len(df_temp)))
                    
                    df_temp[['sentimento', 'confianca', 'num_tokens']] = resultados
                    progress_bar.progress(40)
                    
                    # Passo 3/4: Extrair bairros (70%)
                    status_text.text("Identificando bairros...")
                    df_temp['bairro'] = df_temp['IDEIA'].astype(str).apply(extrair_bairro)
                    progress_bar.progress(70)
                    
                    # Passo 4/4: Geocodifica√ß√£o (100%)
                    status_text.text("Geolocalizando...")
                    coordenadas = []
                    for i, bairro in enumerate(df_temp['bairro']):
                        coordenadas.append(geocodificar_bairro(bairro) if pd.notna(bairro) else (None, None))
                        progress_bar.progress(70 + int(30 * (i + 1) / len(df_temp)))
                    
                    df_temp[['latitude', 'longitude']] = coordenadas
                    
                    # Finaliza√ß√£o
                    st.session_state.dados_processados = df_temp
                    st.session_state.analyzer = sentiment_analyzer
                    st.session_state.tokenizer = tokenizer
                    st.session_state.arquivo_carregado = True
                    
                    progress_bar.progress(100)
                    status_text.text("Processamento completo!")
                    st.success("Dados processados com sucesso!")
                    
                else:
                    progress_bar.empty()
                    st.error("O arquivo deve conter a coluna 'IDEIA'")

    # Se√ß√£o para adicionar nova ideia (sempre vis√≠vel)
    with st.expander("‚ûï Adicionar Nova Ideia", expanded=True):
        with st.form("nova_ideia_form"):
            nova_ideia = st.text_area(
                "Digite sua ideia, sugest√£o ou cr√≠tica sobre Florian√≥polis:",
                height=150,
                value=st.session_state.texto_ideia,
                key="input_ideia"
            )
            col1, col2 = st.columns([4, 1])
            with col2:
                enviar = st.form_submit_button("üì®Enviar para An√°lise")
            with col1:
                if st.form_submit_button("Limpar Texto"):
                    st.session_state.texto_ideia = " "
                    st.rerun()
            
            if enviar and nova_ideia:
                if 'analyzer' not in st.session_state or st.session_state.analyzer is None:
                    st.session_state.analyzer, st.session_state.tokenizer = carregar_modelo()
                
                with st.spinner("Analisando nova ideia..."):
                    sentimento, confianca, num_tokens = analisar_sentimento_completo(
                        nova_ideia, st.session_state.analyzer, st.session_state.tokenizer)
                    bairro = extrair_bairro(nova_ideia)
                    latitude, longitude = geocodificar_bairro(bairro) if bairro else (None, None)
                    
                    nova_linha = pd.DataFrame([{
                        'IDEIA': nova_ideia,
                        'sentimento': sentimento,
                        'confianca': confianca,
                        'num_tokens': num_tokens,
                        'bairro': bairro,
                        'latitude': latitude,
                        'longitude': longitude
                    }])
                    
                    st.session_state.novas_ideias = pd.concat(
                        [st.session_state.novas_ideias, nova_linha], 
                        ignore_index=True
                    )
                    if bairro is None:
                        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel identificar um bairro v√°lido na demanda. O mapa/marcador n√£o ser√° exibido para este registro.")
                    else:
                        st.success("Ideia/Sugest√£o adicionada com sucesso! - Bairro Localizado!")
                        #st.balloons()

    # Bot√£o para limpar todos os dados
    if st.session_state.dados_processados is not None or not st.session_state.novas_ideias.empty:
        if st.button("üßπ Limpar Todos os Dados", type="secondary"):
            st.session_state.dados_processados = None
            st.session_state.novas_ideias = pd.DataFrame(columns=['IDEIA', 'sentimento', 'confianca', 'num_tokens', 'bairro', 'latitude', 'longitude'])
            st.session_state.arquivo_carregado = False
            st.session_state.analyzer = None
            st.session_state.tokenizer = None
            st.session_state.texto_ideia = ""
            st.rerun()
            st.success("Todos os dados foram removidos!")

    # Combina dados apenas para o mapa
    df_completo = pd.concat([
        st.session_state.dados_processados if st.session_state.dados_processados is not None else pd.DataFrame(),
        st.session_state.novas_ideias
    ], ignore_index=True)
    
    # Mostra mapa se houver dados
    if not df_completo.empty:
        # Filtra apenas registros com geolocaliza√ß√£o v√°lida
        df_com_mapa = df_completo.dropna(subset=['latitude', 'longitude'])
        if not df_com_mapa.empty:
            st.subheader("üó∫Ô∏è Mapa com Ideias Geolocalizadas")
            mapa = folium.Map(location=[-27.5954, -48.5480], zoom_start=12)
            marker_cluster = MarkerCluster().add_to(mapa)
            for _, row in df_com_mapa.iterrows():
                cor = (
                    "green" if row['sentimento'] == "Positivo" else
                    "blue" if row['sentimento'] == "Neutro" else
                    "red"
                )
                folium.Marker(
                    location=[row['latitude'], row['longitude']],
                    popup=f"<b>Ideia:</b> {row['IDEIA'][:100]}...<b>Bairro:</b> {row['bairro']}<br><b>Sentimento:</b> {row['sentimento']}<br><b>Confian√ßa:</b> {row['confianca']:.2f}",
                    icon=folium.Icon(color=cor)
                ).add_to(marker_cluster)
            st_folium(mapa, width=1000, height=600, key="mapa")
        else:
            st.warning("Nenhuma demanda com geolocaliza√ß√£o v√°lida para exibir no mapa.")
    else:
        st.info("Nenhum dado dispon√≠vel para exibir o mapa. Carregue um arquivo CSV ou adicione uma nova ideia.")

    # Tabelas separadas
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Ideias do Arquivo")
        if st.session_state.dados_processados is not None:
            st.dataframe(st.session_state.dados_processados[['IDEIA', 'sentimento', 'confianca', 'num_tokens', 'bairro']])
        else:
            st.info("Nenhum arquivo processado ainda.")

    with col2:
        st.subheader("‚ú® Novas Ideias Adicionadas")
        if not st.session_state.novas_ideias.empty:
            st.dataframe(st.session_state.novas_ideias[['IDEIA', 'sentimento', 'confianca', 'num_tokens', 'bairro']])
        else:
            st.info("Nenhuma nova ideia adicionada ainda.")

if __name__ == '__main__':
    main()

